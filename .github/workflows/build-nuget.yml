name: build_nuget_package

on:
  push:
    branches:
      - master
    paths:
      - src/Proton/*.fsproj
      - src/Proton/*.fs
      - src/Proton/paket.references
      - src/Proton/Proton.fsproj.paket.template
      - .github/workflows/build-nuget.yml

# permissions are needed if pushing to ghcr.io
permissions: 
  packages: write

jobs:
  build-proton-nuget-package:

    runs-on: ubuntu-latest

    strategy:
        matrix:
          dotnet-version: [ '9.0.x' ]
          dotnet-sdk-version: [ 'net9.0' ]

    permissions:
      contents: read 

    steps:
    - 
      name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.PACKAGE_WRITE_TOKEN }}
    - 
      name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    -
      name: Put project file and output path into environment variable.
      id: determine-paths
      run: |
        echo "project_path=./src/Proton/Proton.fsproj" >> $GITHUB_OUTPUT
        echo "output_path=./src/Proton/deploy" >> $GITHUB_OUTPUT
        echo "test_path"=./src/Tests/Tests.fsproj >> $GITHUB_OUTPUT
        echo "test_dir=./src/Tests" >> $GITHUB_OUTPUT
    -
      name: Read Version
      id: version
      run: |
        VER=$(cat ./VERSION | awk -F. -v OFS=. '{$NF += 1 ; print}')
        echo $VER >> temp && mv temp ./VERSION
        echo "build_version=$VER" >> $GITHUB_OUTPUT
    - 
      name: Install paket as a global tool and add dotnet tools global path to PATH
      run: |
        dotnet tool install -g paket
        echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH
    -
      name: Install nuget packages with paket.
      run: paket install
    - 
      name: Restore local tools
      run: dotnet tool restore
    - 
      name: Build project in release mode
      run: |
        dotnet restore ${{ steps.determine-paths.outputs.project_path }}
        dotnet build --configuration Release ${{ steps.determine-paths.outputs.project_path }}
    - 
      name: Test project
      run: |
        dotnet tool restore
        dotnet restore ${{ steps.determine-paths.outputs.test_path }}
        dotnet build ${{ steps.determine-paths.outputs.test_path }}
        dotnet test ${{ steps.determine-paths.outputs.test_dir }}/bin/Debug/${{ matrix.dotnet-sdk-version }}/Tests.dll --logger "trx;LogFileName=test-results.trx"
    - 
      id: pack-nuget
      name: Pack NuGet package
      run: |
        paket pack --build-config Release --version ${{ steps.version.outputs.build_version }} ${{ steps.determine-paths.outputs.output_path }}
    - 
      name: Publish Nuget
      run: dotnet nuget push ${{ steps.determine-paths.outputs.output_path }}/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_PUSH }}
    - 
      name: Commit and tag new version and create release
      env: 
        GH_TOKEN: ${{ secrets.PACKAGE_WRITE_TOKEN }}
      run: |        
        t_tag='FSharp.Proton-v${{ steps.version.outputs.build_version }}'
        git config user.name github-actions
        git config user.email github-actions@github.com
        git pull
        git add './VERSION'
        git commit -m 'Update version for FSharp.Proton to ${{ steps.version.outputs.build_version }}'
        git push origin master
        git tag -a "$t_tag" -m "Released new version of FSharp.Proton."
        git push origin "$t_tag"
        gh release create 'FSharp.Proton-${{ steps.version.outputs.build_version }}' \
            -t 'FSharp.Proton ${{ steps.version.outputs.build_version }}' \
            -n 'FSharp.Proton ${{ steps.version.outputs.build_version }} Release Files' \
            --generate-notes \
            ${{ steps.determine-paths.outputs.output_path }}/*.*
